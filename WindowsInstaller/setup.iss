; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
; Ref: http://stackoverflow.com/questions/4833831/inno-setup-32bit-and-64bit-in-one

; ****  REQUIREMENTS FOR COMPILING THIS INSTALLER SCRIPT  ****
; The following files must exist in the same directory location as this script
; gdal-111-1600-core.msi
; gdal-111-1600-x64-core.msi
; mpi_x86.msi
; mpi_x64.msi
; vcredist_x86_2010.exe
; vcredist_x64_2010.exe
; Firewall.bat
; GDAL 32-bit library files must exist under the following directory (this directory should exists at the same level as this script): 
; GDAL_32/
; GDAL 64-bit library files must exist under the following directory (this directory should exists at the same level as this script): 
; GDAL_64/
; TauDEM 32-bit executables must exist under the following directory (this directory should exists at the same level as this script): 
; TauDEM_Exe/win_32/
; TauDEM 64-bit executables must exist under the following directory (this directory should exists at the same level as this script): 
; TauDEM_Exe/win_64/
; TauDEM ArcGIG toolbox related python files and the one .tbx file must exist under the following directory (this directory should exists at the same level as this script):
; TauDEMArcGIS/

#define MyAppName "TauDEM"
#define MyAppVersion "5.4"
#define MyAppPublisher "Utah State University"
#define MyAppURL "http://hydrology.usu.edu/taudem/taudem5/index.html"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{101606B8-FCD5-4E2F-B976-6DC9D190A201}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\TauDEM
DefaultGroupName={#MyAppName}
OutputBaseFilename=TauDEM53_setup
Compression=lzma
SolidCompression=yes        
; "ArchitecturesInstallIn64BitMode=x64" requests that the install be
; done in "64-bit mode" on x64, meaning it should use the native
; 64-bit Program Files directory and the 64-bit view of the registry.
; On all other architectures it will install in "32-bit mode".
ArchitecturesInstallIn64BitMode=x64
WizardSmallImageFile=taudem.bmp
; Don't show the welcome wizard page  and ready to install page
DisableWelcomePage=yes
DisableReadyPage=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Dirs]
Name: "C:\GDAL"

;[Messages]
;WelcomeLabel2=This will install [name/ver] on your computer.%nIt is recommended that you close all other applications and disable any anti virus before continuing. %n%nThe following programs will be installed:%nGDAL 111 (MSVC 2010)%nMicrosoft HPC Pack 2012 MS-MPI Redistributable Pack%nMicrosoft Visual C++ 2010 x86 Redistributable%n TauDEM version 5.3

[Files]
; copy files 
Source: "gdal-111-1600-core.msi"; DestDir: "{app}\setup_files"; Flags: ignoreversion; Check: not Is64BitInstallMode
Source: "gdal-111-1600-x64-core.msi"; DestDir: "{app}\setup_files"; Flags: ignoreversion; Check: Is64BitInstallMode

Source: "mpi_x86.msi"; DestDir: "{app}\setup_files"; Flags: ignoreversion; Check: not Is64BitInstallMode
Source: "mpi_x64.msi"; DestDir: "{app}\setup_files"; Flags: ignoreversion; Check: Is64BitInstallMode

; since for 64bit installtion we need both x86 and x64 redestributables no need to check OS architecture for copying files
Source: "vcredist_x86_2010.exe"; DestDir: "{app}\setup_files"; Flags: ignoreversion
Source: "vcredist_x64_2010.exe"; DestDir: "{app}\setup_files"; Flags: ignoreversion

Source: "GDAL_64\*"; DestDir: "C:\GDAL"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: Is64BitInstallMode
Source: "GDAL_32\*"; DestDir: "C:\GDAL"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: not Is64BitInstallMode

Source: "TauDEM_Exe\win_32\*"; DestDir: "{app}\TauDEM5Exe"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: not Is64BitInstallMode
Source: "TauDEM_Exe\win_64\*"; DestDir: "{app}\TauDEM5Exe"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: Is64BitInstallMode

Source: "TauDEMArcGIS\*"; DestDir: "{app}\TauDEM5Arc"; Flags: ignoreversion recursesubdirs createallsubdirs

Source: "Firewall.bat"; DestDir: "{app}\setup_files"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Run]
; install GDAL core components
Filename: "{app}\setup_files\gdal-111-1600-core.msi"; Flags: waituntilterminated shellexec; Check: not Is64BitInstallMode
Filename: "{app}\setup_files\gdal-111-1600-x64-core.msi"; Flags: waituntilterminated shellexec; Check: Is64BitInstallMode  
 
Filename: "{app}\setup_files\vcredist_x86_2010.exe"; Flags: waituntilterminated; Check: NeedsToInstallRedist(False)
Filename: "{app}\setup_files\vcredist_x64_2010.exe"; Flags: waituntilterminated; Check: NeedsToInstallRedist(True)

Filename: "{app}\setup_files\mpi_x86.msi"; Flags: waituntilterminated shellexec; Check: NeedsToInstallMPI(False)
Filename: "{app}\setup_files\mpi_x64.msi"; Flags: waituntilterminated shellexec; Check: NeedsToInstallMPI(True)
Filename: "{app}\setup_files\Firewall.bat"; Flags: waituntilterminated shellexec; AfterInstall: CleanUp('{app}\setup_files')


[Registry]
; set PATH
; set GDAL components path
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};C:\GDAL"; Check: NeedsAddPath('C:\GDAL', True, False); Flags: preservestringtype
;set GDAL program path
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{pf}\GDAL"; Check: NeedsAddPath('{pf}\GDAL', True, True); Flags: preservestringtype
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{pf}\GDAL"; Check: NeedsAddPath('{pf}\GDAL', False, True); Flags: preservestringtype
; set TauDEM path
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{app}\TauDEM5Exe"; Check: NeedsAddPath('{app}\TauDEM5Exe', False, True); Flags: preservestringtype
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{app}\TauDEM5Exe"; Check: NeedsAddPath('{app}\TauDEM5Exe', True, True); Flags: preservestringtype


[code]
// add a custome wizard page after the welcome page to show the list of programs that will be installed
procedure InitializeWizard();
var UserPage: TInputQueryWizardPage;
var notes_string: string;

begin
  notes_string := 'NOTES:'#13'1. The redistributables listed above will only be installed if they are not already installed.'#13 +
      '2. You will need to accept the license agreements associated with this software and click through several screens.'#13 +
      '3. When prompted to Choose Setup Type for GDAL, choose “Typical”.'#13 +
      '4. The installer will also add firewall exceptions to allow TauDEM programs to run. These allow MPI interprocess communication used in the parallel computations.  This is communication within your computer and not over any external network.'#13 +
      '5. The installer will also add the following path entries:' +
      'C:\Program Files\Microsoft HPC Pack 2012\Bin\;C:\GDAL;C:\Program Files\GDAL;C:\Program Files\TauDEM\TauDEM5Exe'; 

  if Is64BitInstallMode then
  begin
    UserPage := CreateInputQueryPage(wpWelcome,
      'The following programs will be installed', '',
      'TauDEM version 5.3, GDAL 111 (MSVC 2010) for 64 bit Winodws PC, Microsoft Visual C++ 2010 SP1 Redistributable Package (x86), ' +
      'Microsoft Visual C++ 2010 SP1 Redistributable Package (x64), Microsoft HPC Pack 2012 MS-MPI Redistributable Package'#13#13 +  notes_string);   
  end
  else
    begin
      UserPage := CreateInputQueryPage(wpWelcome,
      'The following programs will be installed', '',
      'TauDEM version 5.3, GDAL 111 (MSVC 2010) for 32 bit Windows PC, Microsoft Visual C++ 2010 SP1 Redistributable Package (x86), ' + 
      'Microsoft HPC Pack 2012 MS-MPI Redistributable Package'#13#13 +  notes_string);
    end
end;

// Check if we need to install C++ Redistributable
// If either a 64 or 32 bit version of C++ redistributable is already installed, then this function returns False, otherwise True
function NeedsToInstallRedist(IsInstallAppX64: boolean): boolean;
begin
    if Is64BitInstallMode and IsInstallAppX64 then
    begin
       if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Classes\Installer\Products\1926E8D15D0BCE53481466615F760A7F') then
          begin
            Result := False;
            exit;
          end
       else
          begin
            Result := True;
            exit;
          end;
    end
    else if Is64BitInstallMode and not IsInstallAppX64 then
      begin
         if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Classes\Installer\Products\1D5E3C0FEDA1E123187686FED06E995A') then
            begin
              Result := False;
              exit;
            end
         else
            begin
              Result := True;
              exit;
            end;
      end
    else 
      begin
         if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Classes\Installer\Products\1D5E3C0FEDA1E123187686FED06E995A') then
            begin
              Result := False;
              exit;
            end
         else
            begin
              Result := True;
              exit;
            end;
      end;
end;

// Check if we need to install MPI
// If either a 64 or 32 bit version of MPI is already installed, then this function returns False, otherwise True
function NeedsToInstallMPI(IsInstallAppX64: boolean): boolean;
begin
    if Is64BitInstallMode and IsInstallAppX64 then
    begin
       if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Classes\Installer\Products\618A082FBC0C00743A6CF9DDC808DF81') then
          begin
            Result := False;
            exit;
          end
       else
          begin
            Result := True;
            exit;
          end;
    end
    else if not Is64BitInstallMode and not IsInstallAppX64 then
      begin
         if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Classes\Installer\Products\2B417A095389B814BBF02657C04C242B') then
            begin
              Result := False;
              exit;
            end
         else
            begin
              Result := True;
              exit;
            end;
      end;
end;

function NeedsAddPath(NewPath: string; Win64: boolean; CheckOSArchitecture: boolean): boolean;
var
  OrigPath: string;
begin
  if CheckOSArchitecture then
  begin 
    if not IsWin64 and Win64 then
    begin
      Result := False;
      exit;
    end;
    if IsWin64 and not Win64 then
    begin
      Result := False;
      exit;
    end;   
  end;
  //MsgBox('Checking path variable', mbInformation, MB_OK);
  //MsgBox('NewPath:' + ExpandConstant(NewPath), mbInformation, MB_OK);
  // this will read the current path value and store in the variable OrigPath
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', OrigPath) then
  begin
    // Path variable is missing
    //MsgBox('Path variable not found.', mbInformation, MB_OK);
    Result := True;
    exit;
  end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  //MsgBox('OrigPath:' + OrigPath, mbInformation, MB_OK);
  Result := Pos(';' + UpperCase(ExpandConstant(NewPath)) + ';', ';' + UpperCase(OrigPath) + ';') = 0;
  //if Result then
  //  MsgBox('Result of path matching:match not found', mbInformation, MB_OK)
  //else
  //  MsgBox('Result of path matching:match found', mbInformation, MB_OK)
end;

procedure CleanUp(FolderToDelete: string);
begin         
    if DirExists(ExpandConstant(FolderToDelete)) then
    begin
        DelTree(ExpandConstant(FolderToDelete), True, True, True);
        //MsgBox('Folder deleted', mbInformation, MB_OK);
    end;  
end;
